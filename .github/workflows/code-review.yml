name: GPT-4.1 C# Code Review

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.cs'

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai requests
          
      - name: GPT-4.1 C# Code Review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          REVIEW_INSTRUCTIONS: ${{ vars.CODE_REVIEW_INSTRUCTIONS || 'Focus on code quality, performance, security, and C# best practices.' }}
          GPT_MODEL: ${{ vars.GPT_MODEL || 'gpt-4.1' }}
        run: |
          cat > code_review.py << 'EOL'
          import os
          import subprocess
          import requests
          import re
          from openai import OpenAI
          
          # Configuration
          GITHUB_TOKEN = os.environ['GITHUB_TOKEN']
          PR_NUMBER = os.environ['PR_NUMBER']
          REPO_OWNER = os.environ['REPO_OWNER']
          REPO_NAME = os.environ['REPO_NAME']
          BASE_SHA = os.environ['BASE_SHA']
          HEAD_SHA = os.environ['HEAD_SHA']
          REVIEW_INSTRUCTIONS = os.environ['REVIEW_INSTRUCTIONS']
          GPT_MODEL = os.environ['GPT_MODEL']
          
          # Initialize OpenAI client
          client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])
          
          def get_changed_csharp_files():
              """Get changed C# files in the PR"""
              cmd = ['git', 'diff', '--name-only', BASE_SHA, HEAD_SHA]
              result = subprocess.run(cmd, capture_output=True, text=True, check=True)
              return [f for f in result.stdout.strip().split('\n') if f.endswith('.cs') and f.strip()]
          
          def get_file_diff(file_path):
              """Get diff for a specific file"""
              cmd = ['git', 'diff', BASE_SHA, HEAD_SHA, '--', file_path]
              try:
                  result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                  return result.stdout
              except:
                  return None
          
          def review_code(file_path, diff):
              """Send code diff to GPT for review"""
              if not diff or diff.strip() == '':
                  return None
              
              prompt = f"""
              You are a C# code reviewer. Review the following diff and provide feedback:
              
              File: {file_path}
              
              {REVIEW_INSTRUCTIONS}
              
              ```diff
              {diff}
              ```
              
              Focus on:
              1. Code quality issues
              2. Potential bugs
              3. Performance concerns
              4. Security vulnerabilities 
              5. C# best practices
              
              If there are no issues, respond with "LGTM" (Looks Good To Me).
              For issues, format as:
              - **Issue**: [Description]
              - **Suggestion**: [Recommendation]
              - **Explanation**: [Why this is important]
              """
              
              try:
                  response = client.chat.completions.create(
                      model=GPT_MODEL,
                      messages=[
                          {"role": "system", "content": "You are a senior C# developer providing code review comments."},
                          {"role": "user", "content": prompt}
                      ],
                      temperature=0.3,
                      max_tokens=2000
                  )
                  
                  review = response.choices[0].message.content.strip()
                  return None if review == "LGTM" else review
              except Exception as e:
                  return f"Error reviewing code: {e}"
          
          def find_line_number(diff):
              """Find first modified line number in diff"""
              lines = diff.split('\n')
              for line in lines:
                  if line.startswith('@@'):
                      match = re.search(r'\+(\d+)', line)
                      if match:
                          return int(match.group(1))
              return 1
          
          def add_pr_comment(file_path, comment, line_number=None):
              """Add comment to PR"""
              headers = {
                  'Authorization': f'token {GITHUB_TOKEN}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              if line_number:
                  url = f'https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/pulls/{PR_NUMBER}/comments'
                  payload = {
                      'body': comment,
                      'commit_id': HEAD_SHA,
                      'path': file_path,
                      'line': line_number,
                      'side': 'RIGHT'
                  }
              else:
                  url = f'https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/issues/{PR_NUMBER}/comments'
                  payload = {'body': f"### Review for {file_path}\n\n{comment}"}
              
              response = requests.post(url, headers=headers, json=payload)
              
              if response.status_code not in (201, 200) and line_number:
                  add_pr_comment(file_path, comment, None)
          
          def main():
              changed_files = get_changed_csharp_files()
              
              if not changed_files:
                  print("No C# files changed.")
                  return
              
              print(f"Reviewing {len(changed_files)} C# files...")
              
              for file_path in changed_files:
                  diff = get_file_diff(file_path)
                  if not diff:
                      continue
                  
                  review = review_code(file_path, diff)
                  
                  if review:
                      line_number = find_line_number(diff)
                      comment = f"## GPT-4.1 C# Code Review\n\n{review}"
                      add_pr_comment(file_path, comment, line_number)
          
          if __name__ == "__main__":
              main()
          EOL
          
          python code_review.py